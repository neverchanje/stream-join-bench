---
version: "3"
services:
  message_queue:
    image: "docker.vectorized.io/vectorized/redpanda:latest"
    command:
      - redpanda
      - start
      - "--smp"
      - "1"
      - "--reserve-memory"
      - 0M
      - "--memory"
      - 4G
      - "--overprovisioned"
      - "--node-id"
      - "0"
      - "--check=false"
      - "--kafka-addr"
      - "PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092"
      - "--advertise-kafka-addr"
      - "PLAINTEXT://message_queue:29092,OUTSIDE://localhost:9092"
    expose:
      - "29092"
      - "9092"
      - "9644"
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9644:9644"
      - "8081:8081"
    depends_on: []
    volumes:
      - "message_queue:/var/lib/redpanda/data"
    environment: {}
    container_name: message_queue
    healthcheck:
      test: curl -f localhost:9644/v1/status/ready
      interval: 1s
      timeout: 5s
      retries: 5

  postgres:
    image: debezium/postgres:13
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgresuser
      POSTGRES_DB: mydb
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h 127.0.0.1 -U postgresuser -d mydb"
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    container_name: postgres

  debezium:
    image: debezium/connect:1.9
    environment:
      BOOTSTRAP_SERVERS: message_queue:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://message_queue:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://message_queue:8081
    ports:
      - 8083:8083
    healthcheck:
      test: curl -f localhost:8083
      interval: 1s
      start_period: 120s
    depends_on:
      message_queue: { condition: service_healthy }
      postgres: { condition: service_healthy }
    container_name: debezium

  debezium_deploy:
    image: debezium/connect:1.9
    depends_on:
      debezium:
        condition: service_healthy
    volumes:
      - ./postgres_dbz.sh:/postgres_dbz.sh
    entrypoint: [ bash, -c, /postgres_dbz.sh ]
    container_name: debezium_deploy
    restart: on-failure

volumes:
  message_queue:
    external: false
